const jwt = require("jsonwebtoken");//token verify ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
const userModel = require("../models/user.model");//token ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ user ID ‡¶¶‡¶ø‡ßü‡ßá ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø


async function authmiddleware(req,res,next){
    const token =req.cookies.token; 
    /*üëâ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá request-‡¶è‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞ ‡¶•‡ßá‡¶ï‡ßá cookie ‡¶•‡ßá‡¶ï‡ßá token ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§
    ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶§‡ßã login/register ‡¶è‡¶∞ ‡¶∏‡¶Æ‡ßü cookie ‡¶§‡ßá token ‡¶™‡¶æ‡¶†‡¶ø‡ßü‡ßá‡¶õ‡¶ø‡¶≤‡ßá, ‡¶§‡¶æ‡¶á ‡¶®‡¶æ? üòÑ
    ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡ßá‡¶á token‡¶ü‡¶æ ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§
    */

    if(!token){
        return res.status(401).json({message:"No token provided"});
    }

      try{
        const decode = jwt.verify(token,process.env.jwtSecret)
        
        /*üëâ ‡¶è‡¶ñ‡¶® token ‡¶ü‡¶æ verify ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‚Äî
            ‡¶Æ‡¶æ‡¶®‡ßá, ‡¶è‡¶á token ‡¶ü‡¶æ ‡¶Ü‡¶∏‡¶≤‡ßá‡¶á ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶ï‡¶ø‡¶®‡¶æ ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§

            ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ü‡¶æ ‡¶≠‡ßÅ‡ßü‡¶æ token ‡¶π‡ßü ‡¶¨‡¶æ ‡¶Æ‡ßá‡ßü‡¶æ‡¶¶ ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡ßü ‚Üí ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ catch ‡¶¨‡ßç‡¶≤‡¶ï‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§

            decode ‡¶è‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá token ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü‡ßá‡¶∞ data, ‡¶Ø‡ßá‡¶Æ‡¶®:

            {id: user._id}

        */

        const user = await userModel.findOne({
          _id:decode.id
        })

        req.user = user;
        next();
 
      }catch(err){
        return res.status(401).json({message:"Invalid token"});
      } 

}

module.exports=authmiddleware;